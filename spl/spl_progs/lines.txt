//set mode flag of cureent process to 10(exit system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 10;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;
R1=3; //Function number of exit in process manager module(Module 1)
R2=[SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

alias check R1;
check=1;

alias index R2;
index=1;

//Checking if there is any process which is not yet TERMINATED
while(index<=15) do

	if([(PROCESS_TABLE + (index * 16)) + 4]!=TERMINATED) then
		check=0;
		break;
	endif;
	index=index+1;
endwhile;

//If all processes are terminated then halt the machine
if(check==1) then
	halt;
else
	call MOD_5; //Else call the scheduler
endif;//Exception Handler

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1; //Setting mode flag to -1

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

backup;
if(EC==1) then
	
	print "Ilgl_Instr";
	backup;
	R1=3; //Function number of exit in process manager module(Module 1)
	R2=[SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;

	//Invoking Scheduler
	call MOD_5;

endif;

if(EC==2) then
	print "Ilgl_mem_acc";
	backup;
	R1=3; //Function number of exit in process manager module(Module 1)
	R2=[SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;

	//Invoking Scheduler
	call MOD_5;
endif;


if(EC==3) then
	print "arithmeticExec";
	backup;
	R1=3; //Function number of exit in process manager module(Module 1)
	R2=[SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	restore;

	//Invoking Scheduler
	call MOD_5;
endif;

if(EC==0) then
	//alias exec_pgno R10;
	//exec_pgno=EPN;

	if(EPN==4 || EPN==5 || EPN==6 || EPN==7) then //code page
		//alias block_no R12;
		//block_no=[DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE+1]];

		backup;
			R1=5;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=[DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE+1]+EPN]; //block number
			call MOD_2;
			
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 2*EPN]=R0;
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 2*EPN + 1]="1100";
		restore;
	endif;

	if(EPN==2 || EPN==3) then //heap page missing
		backup;
		R1=1;
		call MOD_2; //calling get new page
		[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 2*EPN]=R0;
		[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 2*EPN + 1]="1110";
		restore;
	endif;

endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0; //Setting mode flag back to 0

restore;

//changing back to user stack
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
//breakpoint;
ireturn;//IDLE process
loadi(69,11);
loadi(70,12);

//Module 7
loadi(54,67);
loadi(55,68);

//Module 5
loadi(50,63);
loadi(51,64);

//--------------------------------------------------

SP=82*512-1;
call MOD_7;


PTBR=PAGE_TABLE_BASE; //for IDLE Process we use first 16 words since its PID=0
PTLR=10;

//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[PROCESS_TABLE+1]=0;
[PROCESS_TABLE+11]=82;
[PROCESS_TABLE+4]=RUNNING;

[PROCESS_TABLE+13]=8*512;
[PROCESS_TABLE+12]=0;
[PROCESS_TABLE+14]=PAGE_TABLE_BASE;
[PROCESS_TABLE+15]=10;


[SYSTEM_STATUS_TABLE+1]=0;

[81 * 512] = [69*512 + 1];
SP=8*512;

// Settine state of other process table entries to TERMINATED



ireturn;











//print "-----------";

//Switching to kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

backup;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+4]=READY; //Changing state of outgoing process to READY

call MOD_5; //Invoking Scheduler

restore;

SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]; //Setting sp to top of user stack
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9] = 0; //Setting mode flag to 0

ireturn;

//Switching to kernel stack

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

backup;

alias reqPID R0;
reqPID = [TERMINAL_STATUS_TABLE+1]; //PID of process which occupied terminal

[PROCESS_TABLE + reqPID*16 + 8]=P0;

//Releasing Terminal

multipush(R0, R1, R2, R3, R4, R5, R6);
R1=9;
R2=reqPID;
call MOD_0; //call resource manager module for release terminal function
multipop(R0, R1, R2, R3, R4, R5, R6);

restore;

//changing back to user stack
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
ireturn;//Switching to kernel stack

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

backup;

[DISK_STATUS_TABLE]=0; //Disk status bit to zero(i.e. it is free)

alias i R0;
i=0;
while(i<=15) do
	if([PROCESS_TABLE+16*i+4] == WAIT_DISK) then
		[PROCESS_TABLE+16*i+4]=READY;
	endif;
	i=i+1;
endwhile;

restore;

//changing back to user stack
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
ireturn;//set mode flag of cureent process to 5(write system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

//save user stack pointer
alias userSP R0;
userSP = SP;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//accessing the file descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

//checking whether file descriptor is valid or not
if (fileDescriptor != -2)
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
else
	//if valid get the word from stack and call device manager module(module 4)
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

	multipush(R0, R1, R2, R3, R4, R5, R6);

	//passing arguments

	R1=3; //System call number of Terminal write in device manager module
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=word; //word to be written

	call MOD_4; //calling device manager module (module 4)
	//Prints the word(writing it instead of "print word;")

	multipop(R0, R1, R2, R3, R4, R5, R6);


	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0; //storing return value(0 for success)

endif;

//changing back to user stack
SP = userSP;

//reset mode flag (0 indicates process is in user mode).
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
//set mode flag of cureent process to 7(read system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

//save user stack pointer
alias userSP R0;
userSP=SP;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//accessing the file descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];


//checking whether file descriptor is valid or not
if(fileDescriptor!=-1) then
	
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	
	[physicalAddrRetVal] = -1;
else
	//if valid get the word from stack and call device manager module(module 4)
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

	multipush(R0, R1, R2, R3, R4, R5, R6, R7);

	//passing arguments

	R1=4; //System call number of Terminal read in device manager module
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=word; //address where the word read should be stored

	call MOD_4;//calling device manager module (module 4)
	//reads the word(writing it instead of "read word;")
	
	multipop(R0, R1, R2, R3, R4, R5, R6, R7);
	
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0; //storing return value(0 for success)

endif;

//changing back to user stack
SP = userSP;

//reset mode flag (0 indicates process is in user mode).
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;alias userSP R0; 
userSP=SP; //Saving value of user stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9; //Setting mode flag to system call no of exec

//accessing the file name from user stack(Since file name is in (arg 1) it is at (sp-4))
alias physicalPageNum R1;
alias offset R2;
alias fileNameAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileNameAddr = (physicalPageNum * 512) + offset;
alias fileName R4;
fileName=[fileNameAddr];

alias check R5;
alias i R6;
alias inode_index R7;

i=0;
check=0;
while(i<MAX_FILE_NUM) do

	if([INODE_TABLE+ 16*i + 1]==fileName) then
		check=1;
		inode_index=i;
		break;
	endif;
	i=i+1;
endwhile;
//Failure case
if(check==0) then
	
	//Setting return value as -1 (Failure)
	alias physicalAddrRetVal R8;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	
	//changing back to user stack
	SP = userSP;

	ireturn;
endif;


//Calling "Exit Process" function
alias PID_exit R10;
PID_exit=[SYSTEM_STATUS_TABLE + 1];
//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
backup;
R1=3; //Function number of exit in process manager module(Module 1)
R2=[SYSTEM_STATUS_TABLE + 1];
call MOD_1;

restore;
//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);

alias userAreaPageNo R8;

userAreaPageNo=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

//Reclaiming the same page by incrementing the memory free list entry of user area page
[MEMORY_FREE_LIST+userAreaPageNo]=[MEMORY_FREE_LIST+userAreaPageNo]+1;

[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//Setting SP to top of kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Set STATE field to RUNNING
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4]=RUNNING;

//Update Inode Index Field
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7]=inode_index;

//Allocating new pages and setting the page table entries for the new process

PTBR=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20;

//Library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
backup;
//Heap
R1=1;
call MOD_2;
[PTBR+4]=R0;
[PTBR+5]="0110";
restore;

backup;
R1=1;
call MOD_2;
[PTBR+6]=R0;
[PTBR+7]="0110";
restore;

backup;
//Stack
R1=1;
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
restore;

backup;
R1=1;
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
restore;

//Code Pages
if([INODE_TABLE+ 16*inode_index + 8] != -1) then
	
	backup;
	R1=1;
	call MOD_2;
	
	[PTBR+8]=R0;
	[PTBR+9]="0100";
	restore;
	loadi([PTBR+8], [INODE_TABLE+ 16*inode_index + 8]);
endif;
if([INODE_TABLE+ 16*inode_index + 9] != -1) then
	backup;
	R1=1;
	call MOD_2;
	[PTBR+10]=R0;
	[PTBR+11]="0100";
	restore;
	loadi([PTBR+10], [INODE_TABLE+ 16*inode_index + 9]);
endif;
if([INODE_TABLE+ 16*inode_index + 10] != -1) then
	backup;
	R1=1;
	call MOD_2;
	[PTBR+12]=R0;
	[PTBR+13]="0100";
	restore;
	loadi([PTBR+12], [INODE_TABLE+ 16*inode_index + 10]);
endif;
if([INODE_TABLE+ 16*inode_index + 11] != -1) then
	backup;
	R1=1;
	call MOD_2;
	[PTBR+14]=R0;
	[PTBR+15]="0100";
	restore;
	loadi([PTBR+14], [INODE_TABLE+ 16*inode_index + 11]);
endif;


//Setting top of SP to entry point
[[PTBR+16]*512] = [[PTBR+8]*512+1];

//changing back to user stack
SP=8*512;

//reset mode flag (0 indicates process is in user mode).
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;//FORK

//set mode flag of cureent process to 8(read system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

//save user stack pointer
alias userSP R13;
userSP=SP;

alias new_PTBR R15;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Invoking get pcb function to get a new pid for child process
alias new_pid R14;
//multipush(R13);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
new_pid=R0;

//multipop(R13);

if(new_pid==-1) then
	alias physicalAddrRetVal R12;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

	//changing back to user stack
	SP = userSP;
	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
endif;

new_PTBR=PAGE_TABLE_BASE+new_pid*20;

//Allocating Stack pages

backup;
//Stack Page-1
R1=1;
call MOD_2;
[new_PTBR+16]=R0;
[new_PTBR+17]=[PTBR+17];
restore;

backup;
//Stack Page-2
R1=1;
call MOD_2;
[new_PTBR+18]=R0;
[new_PTBR+19]=[PTBR+19];
restore;

//Allocating user area page

backup;
R1=1;
call MOD_2;
[PROCESS_TABLE+16*new_pid+11]=R0;
restore;
////////////////Setting up Process Table entries of new process/////////////////

//Copiying "user id" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 3]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 3];

//Copiying "swap flag" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 6]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 6];

//Copiying "user area swap status" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 10]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 10];

//Copiying "inode index" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 7]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 7];

//Copiying "UPTR" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 13]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

//Setting "mode flag" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 9]=0;

//Setting "KPTR" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 12]=0;

//Setting "TICK field" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 0]=0;

//PPID of child == PID of parent
[PROCESS_TABLE + 16*new_pid + 2]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 1];

//State of child process is set to created
[PROCESS_TABLE + 16*new_pid + 4]=CREATED;

//copiying pre process resource table from parent to child
alias ind R9;
ind=496;
while(ind<=511) do
	[ [PROCESS_TABLE+16*new_pid+11]*512 + ind]=[[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 + ind];
	ind=ind+1;
endwhile;

//copiying pre process disk map table from parent to child
alias disk_map_old R11;
disk_map_old= DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE + 1];
alias disk_map R12;
disk_map= DISK_MAP_TABLE + 10*new_pid;
alias i R10;
i=0;
while(i<=9) do
	[disk_map+i]=[disk_map_old+i];
	i=i+1;
endwhile;

//Setting up page table entries of child process(Sharing pages)
//Copiying library entries

i=0;
while(i<=14) do
	[new_PTBR+i]=[PTBR+i];
	[MEMORY_FREE_LIST+[new_PTBR+i]]=[MEMORY_FREE_LIST+[new_PTBR+i]]+1;
	[new_PTBR+i+1]=[PTBR+i+1];
	i=i+2;
endwhile;

//Stack entries are already set earlier

//Copiying user stack contents of parent to child
alias parent_stack R8;
alias child_stack R7;

parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+16];
child_stack = [PAGE_TABLE_BASE+new_pid*20+16];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;
// Second stack page
parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+18];
child_stack = [PAGE_TABLE_BASE+new_pid*20+18];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;

//Cloning User stacks is completed

//Storing BP on top of kernel stack of newly created process
[[PROCESS_TABLE+16*new_pid+11]*512] = BP;

//Setting up return values in user stacks of parent and child

//parent
[( [PTBR+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= new_pid;
//[physicalAddrRetVal] = new_pid;

//child
[([new_PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=0;
//[physicalAddrRetVal] = 0;

//reset the mode flag of parent process to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//PTBR=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20;
//PTBR=old;
//changing back to user stack
SP = userSP;
breakpoint;
ireturn;//timer interrupt
loadi(4,17);
loadi(5,18);

//disk interrupt
loadi(6,19);
loadi(7,20);

//console interrupt
loadi(8,21);
loadi(9,22);


//shared library
loadi(63,13);
loadi(64,14);

//init programme
loadi(65,7);
loadi(66,8);

//INT 10
loadi(22,35);
loadi(23,36);

//Exception handler
loadi(2,15);
loadi(3,16);

//INT 7
loadi(16,29);
loadi(17,30);

//INT 6
loadi(14,27);
loadi(15,28);

//INT 9
loadi(20,33);
loadi(21,34);

//INT 8
loadi(18,31);
loadi(19,32);

//INT 11
loadi(24,37);
loadi(25,38);

//INT 15
loadi(32,45);
loadi(33,46);

//Module 0
loadi(40,53);
loadi(41,54);

//Module 4
loadi(48,61);
loadi(49,62);

//Module 1
loadi(42,55);
loadi(43,56);

//Module 2
loadi(44,57);
loadi(45,58);

//Inode Table
loadi(59,3);
loadi(60,4);

//Loading Disk Free List
loadi(61,2);

//Setting memory free list
alias i R0;
i=0;
while(i<=82) do
	[MEMORY_FREE_LIST+i]=1;
	i=i+1;
endwhile;
i=83;
while(i<=127) do
	[MEMORY_FREE_LIST+i]=0;
	i=i+1;
endwhile;

//Initialising WAIT_MEM_COUNT to 0
[SYSTEM_STATUS_TABLE+3]=0;

//Initialising MEM_FREE_COUNT to 45(no of free pages)
[SYSTEM_STATUS_TABLE+2]=45;

//Initialising terminal status to 0
[TERMINAL_STATUS_TABLE] = 0;

//Disk terminal status to 0
[DISK_STATUS_TABLE] = 0;

//---------------------------------------INIT PROCESS -------------------------//
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//Library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//Heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//Code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//Stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";


[PROCESS_TABLE+16+11]=80; //user area page of init

//Setting up per-process resource table in last 16 words of user area page
alias ind R13;
ind=496;
while(ind<=511) do
	[80*512+ind]=-1;
	ind=ind+2;
endwhile;
//Initially per process resource table is empty

//Setting up disk map table for INIT process
alias disk_map R11;
disk_map= DISK_MAP_TABLE + 10*1;
[disk_map]=-1;
[disk_map+1]=-1;
[disk_map+2]=-1;
[disk_map+3]=-1;
[disk_map+4]=65;
[disk_map+5]=66;
[disk_map+6]=-1;
[disk_map+7]=-1;
[disk_map+8]=-1;
[disk_map+9]=-1;


[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+16+15]=10;

[76*512]=[65*512+1];

//all other processes initially terminated
multipush (R0);
alias count R0;
count = 2;

while(count < 16) do
	[PROCESS_TABLE + count*16 + 4] = TERMINATED;
	count = count + 1;
endwhile;
multipop (R0);

return;//SCHEDULER

//getting current process id
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush (BP);

//saving process context in process table
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


//switching process

alias tempPID R10;
tempPID=currentPID+1;

alias newPID R2;
newPID=0;

tempPID=1;
/////////////////////////////
while(tempPID<currentPID) do
	if([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED) then
		newPID=tempPID;
		break;
	endif;
	tempPID=tempPID+1;
endwhile;
/////////////////////////////

tempPID=currentPID+1;
while(tempPID<=15) do
	if([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED) then
		newPID=tempPID;
		break;
	endif;
	tempPID=tempPID+1;
endwhile;


//restoring process context

alias new_process_table R13;
new_process_table = PROCESS_TABLE + newPID * 16;

alias new_userarea_page_no R14;
new_userarea_page_no = [new_process_table + 11];

SP =  new_userarea_page_no * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

//changing current process
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	SP=[new_process_table + 13];
	
	BP = [[PROCESS_TABLE+16*newPID+11]*512];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	ireturn;

endif;

[new_process_table + 4] = RUNNING;

multipop (BP);

return;//RESOURCE MANAGER MODULE

alias functionNum R1; //retriving the function number
alias currentPID R2; //PID of current process


if(functionNum==3) then //Func number 3 == Acquire Disk

	while( ([DISK_STATUS_TABLE] ) == 1) do
		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_DISK;
		//multipush(R0, R1, R2, R3, R4, R5, R6);
		backup;
		call MOD_5;
		restore;
		//multipop(R0, R1, R2, R3, R4, R5, R6);
	endwhile;

	[DISK_STATUS_TABLE]=1; //setting status of disk status table to 1
	[DISK_STATUS_TABLE+4]=currentPID; //setting PID of process in disk status table
	return;

endif;

if(functionNum==6) then //Func number 6 == Acquire Semaphore
	alias free_index R14;
	alias i R13;
	free_index=-1;
	i=0;
	while(i<32) do
		if([SEMAPHORE_TABLE+i*4+1]==0) then
			free_index=i;
			break;
			i=i+1;
		endif;
	endwhile;

	if(free_index==-1) then
		R0=-1;
		return;
	endif;

	[SEMAPHORE_TABLE+free_index*4+0]=-1; //Setting Locking PID field to -1
	[SEMAPHORE_TABLE+free_index*4+1]=1;  //Setting PROCESS_COUNT field to 1

	R0 = free_index;
	return;

endif;

if(functionNum==7) then //Func number 7 == Release Semaphore
	
	alias semaphore_table_index R10;
	semaphore_table_index = R3;
	if(semaphore_table_index<0 || semaphore_table_index>=32) then
		R0=-1;
		return;
	endif;

	if([SEMAPHORE_TABLE+4*semaphore_table_index+0]==[SYSTEM_STATUS_TABLE+1]) then
		
		[SEMAPHORE_TABLE+4*semaphore_table_index+0]=-1;
		alias i R9;
		i=0;
		while(i<=15) do

			if([PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE && 
				[PROCESS_TABLE+16*i+5]==semaphore_table_index) then

				[PROCESS_TABLE+16*i+4]=READY;

			endif;
			i=i+1;
		endwhile;

	endif;

	[SEMAPHORE_TABLE+4*semaphore_table_index+1]=[SEMAPHORE_TABLE+4*semaphore_table_index+1]-1;
	R0=0;
	return;

endif;

if(functionNum==8) then //Func number 8 == Acquire terminal
	
	while( ([TERMINAL_STATUS_TABLE] ) == 1) do

		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_TERMINAL;
		multipush(R0, R1, R2, R3, R4, R5, R6);
		call MOD_5;
		multipop(R0, R1, R2, R3, R4, R5, R6);

	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;

endif;

if(functionNum==9) then //func number 9 == Release terminal

	if([TERMINAL_STATUS_TABLE + 1] == currentPID) then

		[TERMINAL_STATUS_TABLE] = 0;
		alias i R6;
		i=0;
		//waking up all the processes which are in WAIT_TERMINAL state
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

		R0=0;
		return;

	else

		R0=-1;
		return;

	endif;
endif;//DEVICE MANAGER MODULE

alias functionNum R1;
alias currentPID R2;

if(functionNum==2) then //Disk load function

	alias page_no R3;
	alias block_no R4;

	//Acquiring disk
	backup;
	R1=3;
	R2=currentPID;
	call MOD_0;
	restore;

	//Setting up disk status table entries
	[DISK_STATUS_TABLE+1]=0; //Setting the load/store bit to zero(indicating its a load operation)
	[DISK_STATUS_TABLE+2]=page_no; //Setting page number in disk status table
	[DISK_STATUS_TABLE+3]=block_no; //Setting block number in disk status table

	//load statement
	load(page_no,block_no);

	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;	

	//Invoking context switch module
	backup;
	call MOD_5; //Invoking Scheduler
	restore;

	return;

endif;

if(functionNum==3) then //Terminal write function
	
	backup;
	R1=8;
	R2=currentPID;
	call MOD_0;
	restore;
	//Terminal Acquired

	alias word R3;
	print word;

	//Releasing terminal

	backup;
	R1=9;
	R2=currentPID;
	call MOD_0;
	restore;

	return;

else
	//Terminal read function
	if(functionNum==4) then
	
		//multipush(R0, R1, R2, R3, R4, R5, R6);
		backup;
		R1=8;
		R2=currentPID;
		call MOD_0;
		restore;
		//multipop(R0, R1, R2, R3, R4, R5, R6);
		//Terminal Acquired

		read;
		[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;

		//Invoking context switch module
		backup;
		call MOD_5; //Invoking Scheduler
		restore;

		alias physicalPageNum R4;
		alias offset R5;
		alias PhysicalAddr R6;
		physicalPageNum = [PTBR + 2 * ((R3)/ 512)];
		offset = (R3) % 512;
		PhysicalAddr = (physicalPageNum * 512) + offset;
		[PhysicalAddr] = [PROCESS_TABLE + (currentPID*16) + 8];

		return;
	else
		return;

	endif;

endif;
return;
//PROCESS MANAGER MODULE

alias functionNum R1; //retriving the function number
alias currentPID R2; //PID of current process

if(functionNum==1) then //get free pcb
	alias index R3;
	alias i R4;
	i=0;
	index=-1;
	while(i<=15) do
		if([PROCESS_TABLE + (i * 16) + 4]==TERMINATED) then
			index=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if(index==-1) then
		R0=-1;
		return;
	endif;

	[PROCESS_TABLE + (index * 16) + 1]=index;
	[PROCESS_TABLE + (index * 16) + 14]=PAGE_TABLE_BASE+index*20;
	[PROCESS_TABLE + (index * 16) + 15]=10;
	R0=index;
	return;

endif;

if(functionNum==2) then //Free user area page
	alias userAreaPageNo R3;
	userAreaPageNo=[PROCESS_TABLE + currentPID*16 + 11];

	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	backup;
	R1=2;
	R2=userAreaPageNo;
	call MOD_2;
	restore;
	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	return;

endif;

if(functionNum==3) then //Exit process function

	if([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] != 9) then
		alias i R3;
		i=0;
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4]==WAIT_PROCESS && [PROCESS_TABLE+i*16+5]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			if([PROCESS_TABLE+16*i+2]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+2]=-1;
			endif;
			i=i+1;
		endwhile;
	endif;

	//Free page table Entries
	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	backup;
	R1=4;
	R2=currentPID;
	call MOD_1;
	restore;
	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);

	//Free User area page
	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	backup;
	R1=2;
	R2=currentPID;
	call MOD_1;
	restore;
	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);

	[PROCESS_TABLE+16*currentPID+4]=TERMINATED;
	return;

endif;

if(functionNum==4) then //Free page table function
	
	PTBR=PAGE_TABLE_BASE+currentPID*20;

	//Invalidating Library Pages
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";

	backup;
		alias p R7;
		p=4;
		while(p<20) do
			if([PTBR+p]!=-1) then

				backup;
				R1=2;
				R2=[PTBR+p];
				call MOD_2;
				restore;

				[PTBR+p]=-1;
				[PTBR+p+1]="0000";
			endif;
			p=p+2;
		endwhile;
	restore;

	//removing blocks using disk map table

	alias disk_map R8;
	disk_map = DISK_MAP_TABLE + 10*currentPID; //disk map table base

	alias i R9;
	i=0;

	while(i<=9) do
		if( ([disk_map+i]!=-1) && (i==2 || i==3 || i==8 || i==9) ) then
			backup;
			//Invoking release block function
			R1=4; //Function number of release block function in MOD_0
			R2= [disk_map+i]; //block number to be released
			call MOD_2;
			restore;
		endif;
		[disk_map+i]=-1; //setting all values to -1
		i=i+1;
	endwhile;

	return;
endif;//MEMORY MANAGER MODULE

alias functionNum R1; //retriving the function number

if(functionNum==1) then //Get free page
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1; //Incrementing WAIT_MEM_COUNT

	while([SYSTEM_STATUS_TABLE+2]==0) do //While MEM_FREE_COUNT is 0(i.e. no free memory available)
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_MEM;

		//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
		backup;
		call MOD_5;
		restore;
		//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);		
	endwhile;

	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1; //Decrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1; //Decrementing MEM_FREE_COUNT

	alias i R3;
	i=0;
	while(i<128) do
		if([MEMORY_FREE_LIST+i]==0) then
			[MEMORY_FREE_LIST+i]=1;
			break;
		endif;
		i=i+1;
	endwhile;

	R0=i;

	return;

endif;

if(functionNum==2) then //Release page
	[MEMORY_FREE_LIST+R2]=[MEMORY_FREE_LIST+R2]-1;

	//Increment MEM_FREE_COUNT if no process is using that page
	if([MEMORY_FREE_LIST+R2]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1; 
	endif;
	
	return;
endif;

if(functionNum==4) then //release block function

	alias block_no R2;
	[DISK_FREE_LIST+block_no]=[DISK_FREE_LIST+block_no]-1;
	return;

endif;

if(functionNum==5) then //get code page
	
	alias currentPID R12;
	alias block_no R13;
	currentPID=R2;
	block_no=R3;

	alias i R4;
	alias disk_map R5;
	i=0;
	while(i<=15) do
		disk_map = DISK_MAP_TABLE + 10*i; //disk map table base
		
		//Checking if the required block is already present as any code page
		if([disk_map+4]==block_no) then 
			if([PAGE_TABLE_BASE + i*20 + 8]!=-1) then
				R0=[PAGE_TABLE_BASE + i*20 + 8];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1; //incrementng memory free list
				return;
			endif;
		endif;
	
		if([disk_map+5]==block_no) then
			if([PAGE_TABLE_BASE + i*20 + 10]!=-1) then
				R0=[PAGE_TABLE_BASE + i*20 + 10];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		endif;

		if([disk_map+6]==block_no) then
			if([PAGE_TABLE_BASE + i*20 + 12]!=-1) then
				R0=[PAGE_TABLE_BASE + i*20 + 12];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		endif;

		if([disk_map+7]==block_no) then
			if([PAGE_TABLE_BASE + i*20 + 14]!=-1) then
				R0=[PAGE_TABLE_BASE + i*20 + 14];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		endif;
		
		i = i + 1;
	endwhile;
	
	//If the code page is not in memory
		R1=1;
		call MOD_2;
		R1=2; //Function number of Disk load in device manager module
		R2=currentPID; //argument 1 == PID of process
		R3=R0; //argument 2 ==  page number to where we should load the disk block 
		R4=block_no; //argument 3 == disk block number to be loaded
		call MOD_4; //Calling Device manager module for disk load function
	
	return;

endif;///////////// WAIT, SIGNAL, GETPID and GETPPID System Calls //////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

alias userSP R0; 
alias physicalPageNum R1;
alias offset R2;
alias Addr R3;
alias sys_call_no R4;
alias req_PID R5;
alias physicalAddrRetVal R6;
alias i R7;

//Switching to kernel stack
userSP=SP; //Saving value of user stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

//accessing the System call number from user stack(Since system call number is before arg 1 it is at (sp-5))

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
Addr = (physicalPageNum * 512) + offset;

sys_call_no=[Addr];

if(sys_call_no==11) then //get pid system call

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 11; 

	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE+1] + 1];

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;

endif;

if(sys_call_no==12) then //get ppid system call

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 12; 

	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE+1] + 2];

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;

endif;

if(sys_call_no==13) then //wait system call

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 13; //Setting mode flag to system call no
	
	//PID is stored as argument 1(Extracting PID from user stack)
	physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
	offset = (userSP - 4) % 512;
	Addr = (physicalPageNum * 512) + offset;
	req_PID=[Addr];


	// FAILURE CASE
	if(req_PID<0 || req_PID>=16 || req_PID==[SYSTEM_STATUS_TABLE+1] || [PROCESS_TABLE+req_PID*16+4]==TERMINATED) then
		
		//Setting return value as -1 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;

	[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_PROCESS;
	[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 5] = req_PID;

	backup;
		call MOD_5;
	restore;

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value to 0
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;

endif;

if(sys_call_no==14) then //Signal system call

	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 14;

	i=0;
	while(i<=15) do
		if ([PROCESS_TABLE + i*16 + 4]==WAIT_PROCESS && 
			[PROCESS_TABLE + i*16 + 5]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE + i*16 + 4]=READY;
		endif;
		i=i+1;
	endwhile;

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value to 0
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;

endif;//////////////////////// SEMGET AND SEM-RELEASE SYSTEM CALLS//////////////////////////

alias userSP R0; 
alias physicalPageNum R1;
alias offset R2;
alias Addr R3;
alias sys_call_no R4;
alias free_entry R5;
alias i R6;
alias userAreaPageNo R7;
alias physicalAddrRetVal R8;
alias semaphore_descriptor R9;
alias semaphore_table_index R10;

userSP = SP;

//Switching to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

//accessing the System call number from user stack(Since system call number is before arg 1 it is at (sp-5))

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
Addr = (physicalPageNum * 512) + offset;

sys_call_no=[Addr];

if(sys_call_no == 17) then  //SEMGET systemcall
	
	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 17;
	userAreaPageNo = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];
	free_entry=-1;
	i=496;
	while(i<=511) do
		if([userAreaPageNo*512+i]==-1) then
			free_entry=i;
			break;
		endif;
		i=i+2;
	endwhile;

	if(free_entry==-1) then
		//Setting return value as -1 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;

	semaphore_descriptor=(free_entry-496)/2;

	[userAreaPageNo*512+free_entry]=1; //Setting resource identifier field as semaphore(i.e. 1)

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
		
		R1=6; //Function number of Acquire semaphore in MOD_1
		R2=[SYSTEM_STATUS_TABLE+1]; //PID of current process
		call MOD_1;	
		semaphore_table_index=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);

	if(semaphore_table_index==-1) then
		//Setting return value as -2 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -2;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;

	//Setting semaphore table in per-process resource table 2nd word
	[userAreaPageNo*512+free_entry+1]=semaphore_table_index;	



	//Changing back to user stack and return to user mode
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value to semaphore descriptor Index in per-process resource table
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = semaphore_descriptor;

	ireturn;
endif;

if(sys_call_no == 18) then  //SEM-RELEASE systemcall
	
	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 18;

	userAreaPageNo = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

	physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
	offset = (userSP - 4) % 512;
	Addr = (physicalPageNum * 512) + offset;

	semaphore_descriptor = [Addr];

	if(semaphore_descriptor < 0 || semaphore_descriptor > 7 
		|| [userAreaPageNo * 512 + (semaphore_descriptor * 2 + 496)] !=1) then

		//Setting return value as -1 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;

	endif;

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		
		R1=7; //Function number of Acquire semaphore in MOD_1
		R2=[SYSTEM_STATUS_TABLE+1]; //PID of current process
		R3=[userAreaPageNo * 512 + (semaphore_descriptor * 2 + 496)+1];
		call MOD_1;
		if(R0==-1) then
			print "SemtabIndErr";
		endif;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	[userAreaPageNo * 512 + (semaphore_descriptor * 2 + 496)] = -1;

	//Changing back to user stack and return to user mode
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value to 0
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	ireturn;
endif;