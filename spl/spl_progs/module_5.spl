//SCHEDULER

//getting current process id
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush (BP);

//saving process context in process table
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


//switching process

alias tempPID R10;
tempPID=currentPID+1;

alias newPID R2;
newPID=0;

while(tempPID<=15) do
	if([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED) then
		newPID=tempPID;
		break;
	endif;
	tempPID=tempPID+1;
endwhile;


//restoring process context

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

alias new_userarea_page_no R4;
new_userarea_page_no = [new_process_table + 11];

SP =  new_userarea_page_no * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

//changing current process
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then

	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	ireturn;

endif;

[new_process_table + 4] = RUNNING;

multipop (BP);

return;