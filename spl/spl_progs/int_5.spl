/////////////// OPEN, CLOSE and SEEK SYSTEM CALLS /////////////////////
/////////////////////////////////////////////////////////////////

alias userSP R0;
alias sys_call_no R1;
alias physicalAddrRetVal R2;
alias filename R3;
alias userAreaPageNo R4;
alias i R5;
alias PPRT_index R6;
alias open_file_table_entry R7;
alias file_desc R8;
alias inode_index R9;
alias lseek R10;
alias file_size R11;
alias offset R12;
alias temp R13;

temp = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);

userSP = SP;
//print "Hello1";
//Switching to kernel stack
[temp + 13] = SP; //Saving sp value in UPTR field
SP = [temp + 11] * 512 - 1; //Setting up kernel stack

//accessing the System call number from user stack(Since system call number is before arg 1 it is at (sp-5))

sys_call_no=[([PTBR + 2 * ((userSP - 5)/ 512)] * 512) + (userSP - 5) % 512];

//Return address
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);


if(sys_call_no==2) then
	
	filename = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512];
	//Setting mode flag to system call number
	[temp + 9] = 2;
	userAreaPageNo = [temp+11];
	PPRT_index = -1;
	i=496;
	while(i<512) do
		if([userAreaPageNo*512+i]==-1) then
			PPRT_index=(i-496)/2;
			break;
		endif;
		i=i+2;
	endwhile;

	//If no free per-process-resource-table entry is found
	if(PPRT_index==-1) then
		[physicalAddrRetVal] = -3;
		//reset mode flag (0 indicates process is in user mode).
		[temp + 9] = 0;
		//changing back to user stack
		SP = userSP;
		ireturn;
	endif;
//print "Hello2";
	multipush(R0,R1,R2,R3,R4,R5,R6);
		R1=3;
		R2=filename;
		call MOD_3;
		open_file_table_entry = R0;
	multipop(R0,R1,R2,R3,R4,R5,R6);

	if(open_file_table_entry==-1 || open_file_table_entry==-2) then
		[physicalAddrRetVal] = open_file_table_entry;
		[temp + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	[userAreaPageNo*512+(2*PPRT_index+496)] = FILE;
	[userAreaPageNo*512+(2*PPRT_index+496)+1] = open_file_table_entry;

	[temp + 9] = 0;
	SP = userSP;

	[physicalAddrRetVal] = PPRT_index;
	ireturn;
//print "Hello3";
endif;

if(sys_call_no==3) then
	
	PPRT_index = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512];
	//Setting mode flag to system call number
	[temp + 9] = 3;

	if(PPRT_index<0 || PPRT_index>7) then
		[physicalAddrRetVal] = -1;
		//reset mode flag (0 indicates process is in user mode).
		[temp + 9] = 0;
		//changing back to user stack
		SP = userSP;
		ireturn;
	endif;
//print "Hello4";
	userAreaPageNo = [temp+11];

	if([userAreaPageNo*512+(PPRT_index*2+496)]!=FILE || 
		[userAreaPageNo*512+(PPRT_index*2+496)]==-1) then

		[physicalAddrRetVal] = -1;
		//reset mode flag (0 indicates process is in user mode).
		[temp + 9] = 0;
		//changing back to user stack
		SP = userSP;
		ireturn;
	endif;

	open_file_table_entry = [userAreaPageNo*512+(PPRT_index*2+496)+1];
//print "Hello5";
	backup;
		R1=4;
		R2=open_file_table_entry;
		call MOD_3;
	restore;

	[userAreaPageNo*512+(PPRT_index*2+496)]=-1;
	[temp + 9] = 0;
	SP = userSP;
	[physicalAddrRetVal] = 0;
	ireturn;

endif;

if(sys_call_no==6) then

	PPRT_index = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512];
	//Setting mode flag to system call number
	[temp + 9] = 6;

	if(PPRT_index<0 || PPRT_index>7) then
		[physicalAddrRetVal] = -1;
		//reset mode flag (0 indicates process is in user mode).
		[temp + 9] = 0;
		//changing back to user stack
		SP = userSP;
		ireturn;
	endif;

	userAreaPageNo = [temp+11];

	if([userAreaPageNo*512+(PPRT_index*2+496)]==-1) then

		[physicalAddrRetVal] = -1;
		//reset mode flag (0 indicates process is in user mode).
		[temp + 9] = 0;
		//changing back to user stack
		SP = userSP;
		ireturn;
	endif;

	open_file_table_entry = [userAreaPageNo*512+(PPRT_index*2+496)+1];
	inode_index = [OPEN_FILE_TABLE + 4*open_file_table_entry + 0];

	//Acquiring Inode
	backup;
		R1=4;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=inode_index;
		call MOD_0;

		if(R0==-1) then
			restore;
			[physicalAddrRetVal]=-1;
			//changing back to user stack
			SP = userSP;

			//reset mode flag (0 indicates process is in user mode).
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			ireturn;
		endif;
	restore;

	lseek = [OPEN_FILE_TABLE + 4*open_file_table_entry + 2];

	if(inode_index==INODE_ROOT) then
		file_size=480;
	else
		file_size = [INODE_TABLE+16*inode_index+2];
	endif;

	offset = [([PTBR + 2 * ((userSP - 3)/ 512)] * 512) + (userSP - 3) % 512];

	if(lseek+offset < 0) then
		//Releasing Inode
		backup;
			R1=5;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3=inode_index;
			call MOD_0;
		restore;
		[physicalAddrRetVal]=-2;
		//changing back to user stack
		SP = userSP;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		ireturn;
	endif;

	if(offset==0) then
		[OPEN_FILE_TABLE + 4*open_file_table_entry + 2]=0;
	else
		if(lseek + offset > file_size) then
			[OPEN_FILE_TABLE + 4*open_file_table_entry + 2]=file_size;
		else
			[OPEN_FILE_TABLE + 4*open_file_table_entry + 2]=lseek+offset;
		endif;
	endif;

	//Releasing Inode
	backup;
		R1=5;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=inode_index;
		call MOD_0;
	restore;

	[physicalAddrRetVal]=0;
	//changing back to user stack
	SP = userSP;

	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;

endif;