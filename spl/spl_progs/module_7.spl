//timer interrupt
loadi(4,17);
loadi(5,18);

//disk interrupt
loadi(6,19);
loadi(7,20);

//console interrupt
loadi(8,21);
loadi(9,22);


//shared library
loadi(63,13);
loadi(64,14);

//init programme
loadi(65,7);
loadi(66,8);

//INT 10
loadi(22,35);
loadi(23,36);

//Exception handler
loadi(2,15);
loadi(3,16);

//INT 7
loadi(16,29);
loadi(17,30);

//INT 6
loadi(14,27);
loadi(15,28);

//INT 9
loadi(20,33);
loadi(21,34);

//Module 0
loadi(40,53);
loadi(41,54);

//Module 4
loadi(48,61);
loadi(49,62);

//Module 1
loadi(42,55);
loadi(43,56);

//Module 2
loadi(44,57);
loadi(45,58);

//Inode Table
loadi(59,3);
loadi(60,4);

//Setting memory free list
alias i R0;
i=0;
while(i<=82) do
	[MEMORY_FREE_LIST+i]=1;
	i=i+1;
endwhile;
i=83;
while(i<=127) do
	[MEMORY_FREE_LIST+i]=0;
	i=i+1;
endwhile;

//Initialising WAIT_MEM_COUNT to 0
[SYSTEM_STATUS_TABLE+3]=0;

//Initialising MEM_FREE_COUNT to 45(no of free pages)
[SYSTEM_STATUS_TABLE+2]=45;

//Initialising terminal status to 0
[TERMINAL_STATUS_TABLE] = 0;

//Disk terminal status to 0
[DISK_STATUS_TABLE] = 0;

//---------------------------------------INIT PROCESS -------------------------//
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//Library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//Heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//Code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//Stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";


[PROCESS_TABLE+16+11]=80; //user area page of init

//Setting up per-process resource table in last 16 words of user area page
alias ind R13;
ind=496;
while(ind<=511) do
	[80*512+ind]=-1;
	ind=ind+2;
endwhile;
//Initially per process resource table is empty


[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+16+15]=10;

[76*512]=[65*512+1];

return;

