//////////////// SEM-LOCK && SEM-UNLOCK SYSTEM CALLS //////////////////////

alias userSP R0; 
alias physicalPageNum R1;
alias offset R2;
alias Addr R3;
alias sys_call_no R4;
alias semaphore_descriptor R5;
alias userAreaPageNo R6;
alias semaphore_table_index R7;
alias i R8;
alias physicalAddrRetVal R9;

userSP = SP;

//Switching to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

//accessing the System call number from user stack(Since system call number is before arg 1 it is at (sp-5))

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
Addr = (physicalPageNum * 512) + offset;

sys_call_no=[Addr];

if(sys_call_no==19) then  //SEM-LOCK system call
	//print "Hello1";
	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 19;

	physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
	offset = (userSP - 4) % 512;
	Addr = (physicalPageNum * 512) + offset;

	semaphore_descriptor = [Addr];

	userAreaPageNo = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

	if(semaphore_descriptor<0 || semaphore_descriptor>=8 || 
		[userAreaPageNo*512 + (semaphore_descriptor * 2 + 496)]!=1) then

		//Setting return value as -1 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;

	endif;

	semaphore_table_index = [userAreaPageNo*512 + (semaphore_descriptor * 2 + 496) +1];
	
	while([SEMAPHORE_TABLE + 4*semaphore_table_index + 0] != -1 
		&& [SEMAPHORE_TABLE + 4*semaphore_table_index + 0]!=[SYSTEM_STATUS_TABLE+1]) do

		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_SEMAPHORE;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+5]=semaphore_table_index; 

		backup;
		call MOD_5;
		restore;

	endwhile;

	[SEMAPHORE_TABLE + 4*semaphore_table_index + 0] = [SYSTEM_STATUS_TABLE+1];


	//Changing back to user stack and return to user mode
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value as 0 (Success)
		
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	ireturn;

endif;

if(sys_call_no==20) then //SEM_UNLOCK system call
	//print "HEllo2";
	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 20;

	physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
	offset = (userSP - 4) % 512;
	Addr = (physicalPageNum * 512) + offset;

	semaphore_descriptor = [Addr];

	userAreaPageNo = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

	if(semaphore_descriptor<0 || semaphore_descriptor>=8 || 
		[userAreaPageNo*512 + (semaphore_descriptor * 2 + 496)]!=1) then

		//Setting return value as -1 (Failure)
		
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;

	endif;

	semaphore_table_index = [userAreaPageNo*512 + (semaphore_descriptor * 2 + 496) +1];

	if([SEMAPHORE_TABLE + 4*semaphore_table_index + 0]!=-1) then

		if([SEMAPHORE_TABLE + 4*semaphore_table_index + 0]!=[SYSTEM_STATUS_TABLE+1]) then
			//Setting return value as -2 (Failure)
		
			physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
			[physicalAddrRetVal] = -2;

			//reset mode flag (0 indicates process is in user mode).
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
			
			//changing back to user stack
			SP = userSP;

			ireturn;
		endif;

		[SEMAPHORE_TABLE + 4*semaphore_table_index + 0]=-1;

		i=0;
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE &&
				[PROCESS_TABLE+16*i+5]==semaphore_table_index) then

				[PROCESS_TABLE+16*i+4]=READY;
			
			endif;
			i=i+1;
		endwhile;


	endif;

	//Changing back to user stack and return to user mode
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value as 0 (Success)
		
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	ireturn;

endif;