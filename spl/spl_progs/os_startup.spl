//IDLE process
loadi(69,11);
loadi(70,12);

//Module 7
loadi(54,67);
loadi(55,68);

//Module 5
loadi(50,63);
loadi(51,64);

//--------------------------------------------------

SP=82*512-1;
call MOD_7;


PTBR=PAGE_TABLE_BASE; //for IDLE Process we use first 16 words since its PID=0
PTLR=10;

//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[PROCESS_TABLE+1]=0;
[PROCESS_TABLE+11]=82;
[PROCESS_TABLE+4]=RUNNING;

[PROCESS_TABLE+13]=8*512;
[PROCESS_TABLE+12]=0;
[PROCESS_TABLE+14]=PAGE_TABLE_BASE;
[PROCESS_TABLE+15]=10;


[SYSTEM_STATUS_TABLE+1]=0;

[81 * 512] = [69*512 + 1];
SP=8*512;

// Settine state of other process table entries to TERMINATED

multipush (R0);
alias count R0;
count = 2;

while(count < 16) do
	[PROCESS_TABLE + count*16 + 4] = TERMINATED;
	count = count + 1;
endwhile;
multipop (R0);

ireturn;











