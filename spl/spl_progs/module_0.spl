//RESOURCE MANAGER MODULE

alias functionNum R1; //retriving the function number
alias currentPID R2; //PID of current process


if(functionNum==1) then
	alias buffer_no R3;
	while([BUFFER_TABLE+4*buffer_no+2]!=-1) do
		[PROCESS_TABLE+16*currentPID+4]=WAIT_BUFFER;
		[PROCESS_TABLE+16*currentPID+5]=buffer_no;

		backup;
		call MOD_5;
		restore;
	endwhile;
	[BUFFER_TABLE+4*buffer_no+2]=currentPID;
	return;
endif;

if(functionNum==2) then
	alias buffer_no R3;
	if(currentPID != [BUFFER_TABLE+4*buffer_no+2]) then
		R0=-1;
		return;
	endif;

	[BUFFER_TABLE+4*buffer_no+2]=-1;

	alias i R4;
	i=0;
	while(i<=15) do
		if([PROCESS_TABLE+16*i+4]==WAIT_BUFFER &&
			[PROCESS_TABLE+16*i+5]==buffer_no) then

			[PROCESS_TABLE+16*i+4]=READY;
		endif;
		i=i+1;
	endwhile;

	R0=0;
	return;

endif;

if(functionNum==3) then //Func number 3 == Acquire Disk

	while( ([DISK_STATUS_TABLE] ) == 1) do
		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_DISK;
		//multipush(R0, R1, R2, R3, R4, R5, R6);
		backup;
		call MOD_5;
		restore;
		//multipop(R0, R1, R2, R3, R4, R5, R6);
	endwhile;

	[DISK_STATUS_TABLE]=1; //setting status of disk status table to 1
	[DISK_STATUS_TABLE+4]=currentPID; //setting PID of process in disk status table
	return;

endif;

if(functionNum==4) then //Acquire inode
	
	alias index R3;
	while([FILE_STATUS_TABLE+4*index+0]!=-1) do
		[PROCESS_TABLE+16*currentPID+4]=WAIT_FILE;
		[PROCESS_TABLE+16*currentPID+5]=index;
		backup;
		call MOD_5;
		restore;
	endwhile;

	//Checking if file is deleted
	if([INODE_TABLE+16*index+1]==-1) then
		R0=-1;
		return;
	endif;

	//Locking the inode
	[FILE_STATUS_TABLE+4*index+0]=currentPID;

	R0=0;
	return;

endif;

if(functionNum==5) then //Release inode
	
	alias index R3;
	if(currentPID != [FILE_STATUS_TABLE+4*index+0]) then
		R0=-1;
		return;
	endif;

	//Setting lock field to -1
	[FILE_STATUS_TABLE+4*index+0]=-1;

	alias i R4;
	i=0;
	while(i<=15) do
		if([PROCESS_TABLE+16*i+4]==WAIT_FILE &&
			[PROCESS_TABLE+16*i+5]==index) then

			[PROCESS_TABLE+16*i+4]=READY;
		endif;
		i=i+1;
	endwhile;

	R0=0;
	return;

endif;



if(functionNum==6) then //Func number 6 == Acquire Semaphore
	alias free_index R14;
	alias i R13;
	free_index=-1;
	i=0;
	while(i<32) do
		if([SEMAPHORE_TABLE+i*4+1]==0) then
			free_index=i;
			break;
			i=i+1;
		endif;
	endwhile;

	if(free_index==-1) then
		R0=-1;
		return;
	endif;

	[SEMAPHORE_TABLE+free_index*4+0]=-1; //Setting Locking PID field to -1
	[SEMAPHORE_TABLE+free_index*4+1]=1;  //Setting PROCESS_COUNT field to 1

	R0 = free_index;
	return;

endif;

if(functionNum==7) then //Func number 7 == Release Semaphore
	
	alias semaphore_table_index R10;
	semaphore_table_index = R3;
	if(semaphore_table_index<0 || semaphore_table_index>=32) then
		R0=-1;
		return;
	endif;

	if([SEMAPHORE_TABLE+4*semaphore_table_index+0]==[SYSTEM_STATUS_TABLE+1]) then
		
		[SEMAPHORE_TABLE+4*semaphore_table_index+0]=-1;
		alias i R9;
		i=0;
		while(i<=15) do

			if([PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE && 
				[PROCESS_TABLE+16*i+5]==semaphore_table_index) then

				[PROCESS_TABLE+16*i+4]=READY;

			endif;
			i=i+1;
		endwhile;

	endif;

	[SEMAPHORE_TABLE+4*semaphore_table_index+1]=[SEMAPHORE_TABLE+4*semaphore_table_index+1]-1;
	R0=0;
	return;

endif;

if(functionNum==8) then //Func number 8 == Acquire terminal
	
	while( ([TERMINAL_STATUS_TABLE] ) == 1) do

		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_TERMINAL;
		multipush(R0, R1, R2, R3, R4, R5, R6);
		call MOD_5;
		multipop(R0, R1, R2, R3, R4, R5, R6);

	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;

endif;

if(functionNum==9) then //func number 9 == Release terminal

	if([TERMINAL_STATUS_TABLE + 1] == currentPID) then

		[TERMINAL_STATUS_TABLE] = 0;
		alias i R6;
		i=0;
		//waking up all the processes which are in WAIT_TERMINAL state
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

		R0=0;
		return;

	else

		R0=-1;
		return;

	endif;
endif;