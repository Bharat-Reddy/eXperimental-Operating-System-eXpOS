/////////////////// CREATE AND DELETE SYSTEM CALLS /////////////////////////
////////////////////////////////////////////////////////////////////////////

alias userSP R0; 
alias physicalPageNum R1;
alias offset R2;
alias Addr R3;
alias sys_call_no R4;
alias filename R5;
alias permission R6;
alias i R7;
alias inode_free_entry R8;
alias physicalAddrRetVal R9;
alias root_file_index;

userSP = SP;

//Switching to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Setting up kernel stack

//accessing the System call number from user stack(Since system call number is before arg 1 it is at (sp-5))

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
Addr = (physicalPageNum * 512) + offset;

sys_call_no=[Addr];

if(sys_call_no==1) then //CREATE system call

	//Setting mode flag to system call number
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 1;

	//Extracting filename from userstack (argument 1)
	physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
	offset = (userSP - 4) % 512;
	Addr = (physicalPageNum * 512) + offset;
	filename = [Addr];

	//Extracting permission from userstack (argument 2)
	physicalPageNum = [PTBR + 2 * ((userSP - 3)/ 512)];
	offset = (userSP - 3) % 512;
	Addr = (physicalPageNum * 512) + offset;
	permission = [Addr];

	//Checking if file is already present by checking inode table

	i=0;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==filename) then
			print "FilePresent!!"
			//Setting return value as 0 (Success)
			physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
			[physicalAddrRetVal] = 0;

			//reset mode flag (0 indicates process is in user mode).
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

			//changing back to user stack
			SP = userSP;
			ireturn;

		endif;
		i=i+1;
	endwhile;

	//Finding free entry in inode table
	inode_free_entry=-1;
	i=0;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==-1) then
			inode_free_entry=i;
			break;
		endif;
		i=i+1;
	endwhile;

	if(inode_free_entry==-1) then
		//Setting return value as -1 (Failure)
		print "Max_FilesErr";
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;

		//reset mode flag (0 indicates process is in user mode).
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;

	//Settig FILE_NAME in inode table
	[INODE_TABLE+16*inode_free_entry+1]=filename;

	//Setting FILE_SIZE in inode table
	[INODE_TABLE+16*inode_free_entry+2]=0;

	//Setting FILE_TYPE to DATA	
	[INODE_TABLE+16*inode_free_entry+0]=DATA;

	//Setting block numbers to -1 (Indicating no disk blocks are allocated for the file)
	[INODE_TABLE+16*inode_free_entry+8]=-1;
	[INODE_TABLE+16*inode_free_entry+9]=-1;
	[INODE_TABLE+16*inode_free_entry+10]=-1;
	[INODE_TABLE+16*inode_free_entry+11]=-1;

	//Setting userID field
	[INODE_TABLE+16*inode_free_entry+3]=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3];

	//Setting permission bit
	[INODE_TABLE+16*inode_free_entry+4]=permission;		

	root_file_index = inode_free_entry;

	[ROOT_FILE+8*root_file_index+0] = [INODE_TABLE+16*inode_free_entry+1]; //File name
	[ROOT_FILE+8*root_file_index+1] = [INODE_TABLE+16*inode_free_entry+2]; //File Size
	[ROOT_FILE+8*root_file_index+2] = [INODE_TABLE+16*inode_free_entry+0]; //File type

	//Setting username using USER-ID and user table 
	[ROOT_FILE+8*root_file_index+3]=[USER_TABLE + 2*[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3]+0];

	[ROOT_FILE+8*root_file_index+4] = permission; //Permission

	//Changing back to user stack and return to user mode
	SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

	//restoring mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//Setting return value to 0
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

	ireturn;

endif;

if(sys_call_no==4) then //DELETE system call
	
endif;