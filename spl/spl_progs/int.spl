//set mode flag of current process to 7(read system call)
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 7;

//save user stack pointer
alias usersp R0;
usersp = SP;

//switch to kernel stack
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

//retreiving the file descriptor
alias phypageno R1;
alias offset R2;
phypageno = [PTBR + 2*(usersp - 4)/512];
offset = (usersp-4)%512;
R3 = (phypageno*512 + offset);
alias filedesc R4;
filedesc = [R3];

//finding the return address
alias retadd R5;
retadd = (([PTBR + 2*(usersp - 1)/512])*512) + ((usersp-1)%512);

if (filedesc != -1) then
	[retadd] = -1;	//failure
else 
	alias word_add R6;
	word_add = [(([PTBR + 2*(usersp-3)/512])*512) + ((usersp - 3)%512)];
	
	multipush (R0,R1,R2,R3,R4,R5,R6);	//saving context
	
	//passing arguments
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word_add;
	breakpoint;
	call MOD_4;	//calling device manager module(module 4)
	multipop (R0,R1,R2,R3,R4,R5,R6);	//restoring context
	
	[retadd] = 0;	//success
endif;

//reset mode flag (0 indicates process is in user mode)
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;

//changing back to user stack
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

//transfer control to user program
ireturn;