//FORK

//set mode flag of cureent process to 8(read system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

//save user stack pointer
alias userSP R13;
userSP=SP;

alias new_PTBR R15;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Invoking get pcb function to get a new pid for child process
alias new_pid R14;
//multipush(R13);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
new_pid=R0;

//multipop(R13);

if(new_pid==-1) then
	alias physicalAddrRetVal R12;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

	//changing back to user stack
	SP = userSP;
	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
endif;

new_PTBR=PAGE_TABLE_BASE+new_pid*20;

//Allocating Stack pages

backup;
//Stack Page-1
R1=1;
call MOD_2;
[new_PTBR+16]=R0;
[new_PTBR+17]=[PTBR+17];
restore;

backup;
//Stack Page-2
R1=1;
call MOD_2;
[new_PTBR+18]=R0;
[new_PTBR+19]=[PTBR+19];
restore;

//Allocating user area page

backup;
R1=1;
call MOD_2;
[PROCESS_TABLE+16*new_pid+11]=R0;
restore;
////////////////Setting up Process Table entries of new process/////////////////

//Copiying "user id" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 3]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 3];

//Copiying "swap flag" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 6]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 6];

//Copiying "user area swap status" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 10]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 10];

//Copiying "inode index" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 7]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 7];

//Copiying "UPTR" field of process table from parent process table to child process table
[PROCESS_TABLE + 16*new_pid + 13]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

//Setting "mode flag" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 9]=0;

//Setting "KPTR" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 12]=0;

//Setting "TICK field" of child process in process table to zero
[PROCESS_TABLE + 16*new_pid + 0]=0;

//PPID of child == PID of parent
[PROCESS_TABLE + 16*new_pid + 2]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 1];

//State of child process is set to created
[PROCESS_TABLE + 16*new_pid + 4]=CREATED;

//copiying pre process resource table from parent to child
alias ind R9;
ind=496;
while(ind<=511) do
	[ [PROCESS_TABLE+16*new_pid+11]*512 + ind]=[[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 + ind];
	ind=ind+1;
endwhile;

//copiying pre process disk map table from parent to child
alias disk_map_old R11;
disk_map_old= DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE + 1];
alias disk_map R12;
disk_map= DISK_MAP_TABLE + 10*new_pid;
alias i R10;
i=0;
while(i<=9) do
	[disk_map+i]=[disk_map_old+i];
	i=i+1;
endwhile;

//Setting up page table entries of child process(Sharing pages)
//Copiying library entries

i=0;
while(i<=14) do
	[new_PTBR+i]=[PTBR+i];
	[MEMORY_FREE_LIST+[new_PTBR+i]]=[MEMORY_FREE_LIST+[new_PTBR+i]]+1;
	[new_PTBR+i+1]=[PTBR+i+1];
	i=i+2;
endwhile;

//Stack entries are already set earlier

//Copiying user stack contents of parent to child
alias parent_stack R8;
alias child_stack R7;

parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+16];
child_stack = [PAGE_TABLE_BASE+new_pid*20+16];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;
// Second stack page
parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+18];
child_stack = [PAGE_TABLE_BASE+new_pid*20+18];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;

//Cloning User stacks is completed

//Storing BP on top of kernel stack of newly created process
[[PROCESS_TABLE+16*new_pid+11]*512] = BP;

//Setting up return values in user stacks of parent and child

//parent
[( [PTBR+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= new_pid;
//[physicalAddrRetVal] = new_pid;

//child
[([new_PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=0;
//[physicalAddrRetVal] = 0;

//reset the mode flag of parent process to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//PTBR=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20;
//PTBR=old;
//changing back to user stack
SP = userSP;
breakpoint;
ireturn;